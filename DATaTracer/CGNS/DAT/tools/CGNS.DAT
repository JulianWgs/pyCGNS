#!/usr/bin/env python 
#  -------------------------------------------------------------------------
#  pyCGNS.DAT - Python package for CFD General Notation System - DATaTracer
#  See license.txt file in the root directory of this Python module source  
#  -------------------------------------------------------------------------
#  $Release$
#  -------------------------------------------------------------------------
#
import CGNS.DAT.db.connect as dx
import CGNS.DAT.exceptions as ex
import CGNS.DAT.utils      as ut
#
import getopt

# ------------------------------------------------------------
def sqlprint(r):
  if (type(r[0]) == type ("")):
    for rs in r[1]:
      print r[0]%rs
  if (type(r[0]) == type(sqlprint)):
    r[0](r[1])
    
# ------------------------------------------------------------
def parseAndRun(args):
  opt,arg=getopt.getopt(args,"ltnTx:c:r:u:p:a:v:o:i:E:I:")
  connection   = None
  command      = None
  baseid       = None
  path         = None
  empty        = None  
  attribute    = []
  value        = []
  for o,v in opt:
    if (o == "-x"):
      connection=tuple(v.split(":"))
    if (o == "-n"):
      if (not command):    raise ex.DAXDBOptionError([connection,o])
      if (command != "-c"):raise ex.DAXDBOptionError([connection,o])
      empty=1
    if (o == "-T"):
      ut.DAXtraceFlag=2
    if (o == "-t"):
      ut.DAXtraceFlag=1
    if (o in ["-c","-r","-u","-o","-i","-E","-I"]):
      if (not connection): raise ex.DAXDBOptionError([connection,o])
      if (command):        raise ex.DAXDBOptionError([connection,o])
      command=o
      baseid =v
    if (o == "-p"):
      if (not command):    raise ex.DAXDBOptionError([connection,o])
      if (command == "-r"):raise ex.DAXDBOptionError([connection,o])
      if (path):           raise ex.DAXDBOptionError([connection,o])
      if (empty):          raise ex.DAXDBOptionError([connection,o])            
      path=v
    if (o == "-a"):
      if (not command):    raise ex.DAXDBOptionError([connection,o])
      if (command != "-u"):raise ex.DAXDBOptionError([connection,o])
      attribute+=[v]
    if (o == "-v"):
      if (not command):    raise ex.DAXDBOptionError([connection,o])
      if (command != "-u"):raise ex.DAXDBOptionError([connection,o])
      if (not attribute):  raise ex.DAXDBOptionError([connection,o])
      value+=[v]
    if (o == "-l"):
      if (not connection): raise ex.DAXDBOptionError([connection,o])
      if (command):        raise ex.DAXDBOptionError([connection,o])
      command=o
    if (o == "-q"):
      if (not connection): raise ex.DAXDBOptionError([connection,o])
      if (command):        raise ex.DAXDBOptionError([connection,o])
      if (query):          raise ex.DAXDBOptionError([connection,o])
      if (pquery):         raise ex.DAXDBOptionError([connection,o])
      query=v
      command=o
    if (o == "-Q"):
      if (not connection): raise ex.DAXDBOptionError([connection,o])
      if (command):        raise ex.DAXDBOptionError([connection,o])
      if (query):          raise ex.DAXDBOptionError([connection,o])
      if (pquery):         raise ex.DAXDBOptionError([connection,o])
      pquery=v
      command=o
  if (   (not command)
      or (not connection)
#      or (not baseid)
      or (attribute and not value)
      or (value and not attribute)): raise ex.DAXDBOptionError([connection,'?'])
  # ----------    
  if (command == "-c"):
    ut.ptrace("Connection")
    d=dx.daxDB(connection)
    ut.ptrace("Create")
    if   ((not path) and (empty)): d.create(baseid)
    elif  (not path)             : d.create(baseid,".")
    else:                          d.create(baseid,path)
    ut.ptrace("Leave")
    del d
  # ----------    
  if (command == "-o"):
    d=dx.daxDB(connection)
    d.checkout(baseid,path)
    del d
  # ----------    
  if (command == "-i"):
    d=dx.daxDB(connection)
    d.checkin(baseid,path)
    del d
  # ----------    
  if (command == "-u"):
    if (len(attribute) != len(value)): raise ex.DAXDBOptionError([connection,'-u'])
    d=dx.daxDB(connection)
    d.update(baseid,[attribute,value])
    del d
  # ----------    
  if (command == "-r"):
    d=dx.daxDB(connection)
    d.remove(baseid)
    del d
  # ----------    
  if (command == "-E"):
    d=dx.daxET(connection)
    d.exportTree(baseid,path,compress=compress)
    del d
  # ----------    
  if (command == "-I"):
    d=dx.daxET(connection)
    d.importTree(baseid,path)
    del d
    
# ------------------------------------------------------------
# -T (trace) option is not documented
# 
def usage(e=''):
    print """\
CGNS.DAT : CGNS Database interface class
usage    : CGNS.DAT -x <database-connection> [command and option]
         : commands are exclusives, options should be ordered
         : <database-connection> is <databasename>:<username>:<password>
         : No -p argument means use the current directory
         : Use -n for a creation without checkin
         : -t option give a short trace, -T gives verbose trace
commands:
 -c create   = [-t|-T] -c <file-identifier> [ -p <unix-file-path> | -n ]
 -r remove   = [-t|-T] -r <file-identifier>
 -u update   = [-t|-T] -u <file-identifier> [ -a <attribute> -v <value> ]

 -o checkout = [-t|-T] -o <file-identifier> [ -p <unix-file-path> ]
 -i checkin  = [-t|-T] -i <file-identifier> [ -p <unix-file-path> ]

 -q query    = [-t|-T] -q <sql-statement> [-p]
 -Q query    = [-t|-T] -Q <prepared-query-name> [-p] [value]+ 
 -l list     = [-t|-T] -l

 -E export   = [-t|-T] -E <file-identifier> -p <unix-file-path> [-u]
 -I import   = [-t|-T] -I <file-identifier> -p <unix-file-path> 
"""
    print e
    
if (__name__ == "__main__"):
  import sys
  try:
    parseAndRun(sys.argv[1:]) 
  except ex.DAXDBOptionError, e: usage(e)
  except IndexError:             usage()
  except getopt.GetoptError:     usage()

  # DAX exceptions
  except ex.DAXException, e: print e

    
