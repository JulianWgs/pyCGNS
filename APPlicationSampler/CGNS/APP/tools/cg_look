#!/usr/bin/env python
#  -------------------------------------------------------------------------
#  pyCGNS - Python package for CFD General Notation System - 
#  See license.txt file in the root directory of this Python module source  
#  -------------------------------------------------------------------------
#
import sys
import os

prog=sys.argv[0]
dpref='./'
if (prog[0]=='/'):
  dpref=os.path.dirname(prog)
else:
  for pp in os.environ['PATH'].split(':'):
    if (os.path.exists("%s/%s"%(pp,prog))):
      dpref=os.path.dirname("%s/%s"%(pp,prog))
      break
ppref=dpref+'/../lib/python%s/site-packages'%sys.version[:3]
ppref=os.path.normpath(os.path.abspath(ppref))
if (ppref not in sys.path):
  sys.path.append(ppref)

ppref=dpref+'/../Lib/site-packages'
ppref=os.path.normpath(os.path.abspath(ppref))
if (ppref not in sys.path):
  sys.path.append(ppref)

try:
  import numpy
except:
  print """CGNS.NAV: FATAL error, cannot import numpy..."""
  sys.exit(-1)

try:
  import CGNS.MAP
  import CGNS.version
except:
  print """CGNS.NAV: FATAL error, cannot import CGNS.MAP..."""
  sys.exit(-1)
  
try:
  import PySide.QtCore
except:
  print """CGNS.NAV: FATAL error, cannot import PySide.QtCore..."""
  sys.exit(-1)
  
try:
  import vtk
except:
  print """CGNS.NAV: FATAL error, cannot import vtk..."""
  sys.exit(-1)

if (sys.platform=='win32'): import CGNS.NAV.temputils
from CGNS.NAV.moption import Q7OptionContext as OCTXT

doc1="""
  Visual browsing of CGNS/HDF5 files 
  (part of pyCGNS distribution http://pycgns.sourceforge.net)
  pyCGNS v%s
"""%(CGNS.version.id)

doc2="""
  
  The browser provides the user with many different views of the CGNS tree.
  Each view has its on on-line self-contained contextual doc (no web access)
  
  Examples:

"""

import argparse
import re

pr=argparse.ArgumentParser(description=doc1,
                           epilog=doc2,
                           formatter_class=argparse.RawDescriptionHelpFormatter,
                           usage='%(prog)s [options] file1 file2 ...')

pr.add_argument("-P","--profilepath",dest="path",
                help='override CGNSPROFILEPATH variable for profile search')
pr.add_argument('-R','--recurse',action='store_true',
                help='recurse open on tree view')
pr.add_argument('-l','--last',action='store_true',
                help='open last file used')
pr.add_argument('-Q','--querylist',action='store_true',
                help='list all known queries')
pr.add_argument("-q","--query",dest="query",
                help='run query and open selection view')
pr.add_argument('-g','--graphic',action='store_true',
                help='open VTK view')
pr.add_argument('-v','--verbose',action='store_true',
                help='trace mode')
pr.add_argument('files',nargs=argparse.REMAINDER)

args=pr.parse_args()

class Query(object):
  def __init__(self):
    self.userkeys=['DEFAULT']
    self.idlist=[]
    
try:
  ppath=os.environ['CGNSPROFILEPATH']
except KeyError:
  ppath=""

if (args.path is not None): ppath=Q.path

flags=(args.recurse,args.last,args.verbose,args.graphic,args.querylist)
files=args.files

import CGNS.NAV.script
CGNS.NAV.script.run(sys.argv,files,flags,ppath,args.query)

# --- last line
