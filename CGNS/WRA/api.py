#  -------------------------------------------------------------------------
#  pyCGNS - Python package for CFD General Notation System - 
#  See license.txt file in the root directory of this Python module source  
#  -------------------------------------------------------------------------
#
fcts=[
"cg_1to1_average_read",
"cg_1to1_average_write",
"cg_1to1_id",
"cg_1to1_periodic_read",
"cg_1to1_periodic_write",
"cg_1to1_read",
"cg_1to1_read_global",
"cg_1to1_write",
"cg_AngleUnitsName",
"cg_ArbitraryGridMotionTypeName",
"cg_AreaTypeName",
"cg_AverageInterfaceTypeName",
"cg_BCDataTypeName",
"cg_BCTypeName",
"cg_DataClassName",
"cg_DataTypeName",
"cg_ElectricCurrentUnitsName",
"cg_ElementDataSize",
"cg_ElementPartialSize",
"cg_ElementTypeName",
"cg_GoverningEquationsTypeName",
"cg_GridConnectivityTypeName",
"cg_GridLocationName",
"cg_LengthUnitsName",
"cg_LuminousIntensityUnitsName",
"cg_MassUnitsName",
"cg_ModelTypeName",
"cg_PointSetTypeName",
"cg_RigidGridMotionTypeName",
"cg_SimulationTypeName",
"cg_SubstanceAmountUnitsName",
"cg_TemperatureUnitsName",
"cg_TimeUnitsName",
"cg_WallFunctionTypeName",
"cg_ZoneTypeName",
"cg_add_path",
"cg_arbitrary_motion_read",
"cg_arbitrary_motion_write",
"cg_array_info",
"cg_array_read",
"cg_array_read_as",
"cg_array_write",
"cg_axisym_read",
"cg_axisym_write",
"cg_base_id",
"cg_base_read",
"cg_base_write",
"cg_bc_area_read",
"cg_bc_area_write",
"cg_bc_wallfunction_read",
"cg_bc_wallfunction_write",
"cg_bcdata_write",
"cg_bcdataset_info",
"cg_bcdataset_read",
"cg_bcdataset_write",
"cg_biter_read",
"cg_biter_write",
"cg_boco_gridlocation_read",
"cg_boco_gridlocation_write",
"cg_boco_id",
"cg_boco_info",
"cg_boco_normal_write",
"cg_boco_read",
"cg_boco_write",
"cg_cell_dim",
"cg_close",
"cg_configure",
"cg_conn_average_read",
"cg_conn_average_write",
"cg_conn_id",
"cg_conn_info",
"cg_conn_periodic_read",
"cg_conn_periodic_write",
"cg_conn_read",
"cg_conn_read_short",
"cg_conn_write",
"cg_conn_write_short",
"cg_convergence_read",
"cg_convergence_write",
"cg_conversion_info",
"cg_conversion_read",
"cg_conversion_write",
"cg_coord_id",
"cg_coord_info",
"cg_coord_partial_write",
"cg_coord_read",
"cg_coord_write",
"cg_dataclass_read",
"cg_dataclass_write",
"cg_dataset_read",
"cg_dataset_write",
"cg_delete_node",
"cg_descriptor_read",
"cg_descriptor_write",
"cg_diffusion_read",
"cg_diffusion_write",
"cg_discrete_ptset_info",
"cg_discrete_ptset_read",
"cg_discrete_ptset_write",
"cg_discrete_read",
"cg_discrete_size",
"cg_discrete_write",
"cg_elements_partial_read",
"cg_elements_partial_write",
"cg_elements_read",
"cg_equationset_chemistry_read",
"cg_equationset_elecmagn_read",
"cg_equationset_read",
"cg_equationset_write",
"cg_error_exit",
"cg_error_handler",
"cg_error_print",
"cg_expfull_read",
"cg_expfull_write",
"cg_exponents_info",
"cg_exponents_read",
"cg_exponents_write",
"cg_fambc_read",
"cg_fambc_write",
"cg_family_name_read",
"cg_family_name_write",
"cg_family_read",
"cg_family_write",
"cg_famname_read",
"cg_famname_write",
"cg_field_id",
"cg_field_info",
"cg_field_partial_write",
"cg_field_read",
"cg_field_write",
"cg_free",
"cg_geo_read",
"cg_geo_write",
"cg_get_cgio",
"cg_get_compress",
"cg_get_error",
"cg_get_file_type",
"cg_get_name",
"cg_golist",
"cg_gopath",
"cg_gorel",
"cg_goto",
"cg_governing_read",
"cg_governing_write",
"cg_gravity_read",
"cg_gravity_write",
"cg_grid_read",
"cg_grid_write",
"cg_gridlocation_read",
"cg_gridlocation_write",
"cg_hole_id",
"cg_hole_info",
"cg_hole_read",
"cg_hole_write",
"cg_index_dim",
"cg_integral_read",
"cg_integral_write",
"cg_is_cgns",
"cg_is_link",
"cg_link_read",
"cg_link_write",
"cg_model_read",
"cg_model_write",
"cg_multifam_read",
"cg_multifam_write",
"cg_n1to1",
"cg_n1to1_global",
"cg_n_arbitrary_motions",
"cg_n_rigid_motions",
"cg_narrays",
"cg_nbases",
"cg_nbocos",
"cg_nconns",
"cg_ncoords",
"cg_ndescriptors",
"cg_ndiscrete",
"cg_nexponents",
"cg_nfamilies",
"cg_nfamily_names",
"cg_nfields",
"cg_ngrids",
"cg_nholes",
"cg_nintegrals",
"cg_nmultifam",
"cg_npe",
"cg_nsections",
"cg_nsols",
"cg_nsubregs",
"cg_nunits",
"cg_nuser_data",
"cg_nzconns",
"cg_nzones",
"cg_open",
"cg_ordinal_read",
"cg_ordinal_write",
"cg_parent_data_partial_write",
"cg_parent_data_write",
"cg_part_read",
"cg_part_write",
"cg_ptset_info",
"cg_ptset_read",
"cg_ptset_write",
"cg_rigid_motion_read",
"cg_rigid_motion_write",
"cg_rind_read",
"cg_rind_write",
"cg_root_id",
"cg_rotating_read",
"cg_rotating_write",
"cg_save_as",
"cg_section_partial_write",
"cg_section_read",
"cg_section_write",
"cg_set_compress",
"cg_set_file_type",
"cg_set_path",
"cg_simulation_type_read",
"cg_simulation_type_write",
"cg_sol_id",
"cg_sol_info",
"cg_sol_ptset_info",
"cg_sol_ptset_read",
"cg_sol_ptset_write",
"cg_sol_size",
"cg_sol_write",
"cg_state_read",
"cg_state_write",
"cg_subreg_bcname_read",
"cg_subreg_bcname_write",
"cg_subreg_gcname_read",
"cg_subreg_gcname_write",
"cg_subreg_info",
"cg_subreg_ptset_read",
"cg_subreg_ptset_write",
"cg_units_read     ",
"cg_units_write    ",
"cg_unitsfull_read ",
"cg_unitsfull_write",
"cg_user_data_read",
"cg_user_data_write",
"cg_version",
"cg_where",
"cg_zconn_get",
"cg_zconn_read",
"cg_zconn_set",
"cg_zconn_write",
"cg_ziter_read",
"cg_ziter_write",
"cg_zone_id",
"cg_zone_read",
"cg_zone_type",
"cg_zone_write",
]

import CGNS.WRA.mll
p=CGNS.WRA.mll.pyCGNS
for f in fcts:
    if (f[3:] in dir(p)): print 'OK ',f
    else:             print 'BAD',f
  
