.. -------------------------------------------------------------------------
.. pyCGNS - CFD General Notation System - 
.. See license.txt file in the root directory of this Python module source  
.. -------------------------------------------------------------------------

.. _mapexamples:

MAP Examples
++++++++++++

The *CGNS.MAP* provides the user with two functions ``load`` and ``save``.
The actual actions these functions are performing heavily depends on the
arguments you pass to these functions. We give here some examples taken
from usual applications of *CGNS.MAP*.


Complete load of a *CGNS/HDF* file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to load a *CGNS/HDF* file, you have to use the *load* function which reads a CGNS/HDF5 file and produces a CGNS/Python tree. It is necessary to specify the file's name, its place and 
the flags which are connected to the file.
In our example, the value *tree* contains the structure of our *tree*.

::

 import CGNS.MAP 

 (tree,links)=CGNS.MAP.load("001Disk.hdf", CGNS.MAP.S2P_DEFAULT)

 print tree


To be more precise, you can add the *depth*, the *path* and the *linkpath* of the file. In our case, the *depth* is worth 0 and the 
string's *path* is '' because we want to load entirely the tree. Here, the *linkpath* is an empty list because this file has'nt *links*.
As we are located in the same directory as the file, we don't owe necessarily write the *path*.

::

 import CGNS.MAP 

 (tree,links)=CGNS.MAP.load("001Disk.hdf", CGNS.MAP.S2P_DEFAULT,0, '', [], None)

 print tree

Complete save of a *CGNS/Python* tree
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To save a *CGNS/Python* tree, you have to use the *save* function which takes a CGNS/Python tree and writes the contents in a CGNS/HDF5 
file.
As the previous case, it's necessary to specify the file's name and its flags.   


::

 import CGNS.MAP

 status=CGNS.MAP.save("filename.hdf", tree, links, CGNS.MAP.S2P_DEFAULT)

Load of a *CGNS/HDF* file skeletton
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to load the skeletton of a *CGNS/HDF* file, we use the *load* function with the *S2P_NODATA* flag. This flag acts by removing
all the data contained in the tree.

::

 import CGNS.MAP

 flags=CGNS.MAP.S2P_DEFAULT|CGNS.MAP.S2P_NODATA

 (tree,link)=CGNS.MAP.load("001Disk.hdf", flags, 0, '', [], None)

 print tree


Update a sub-tree
~~~~~~~~~~~~~~~~~

This feature is very useful when we shall be interested that in only a part of the data contained in the tree.
We begin by loading the tree.

::

 import CGNS.MAP


 (tree,lk)=CGNS.MAP.load("001Disk.hdf", CGNS.MAP.S2P_DEFAULT, 0, '', [], None)


Then, we modify the data contained in the node whose the label  is 'fluid' by replacing
'ideal' instead of 'perfect'.

::

 >>> tree[2][1][2][1][2][5]
::

 ['fluid',array(['I','d','e','a','l'],dtype='|S1'),[],'DataArray_t']

 import numpy

 tree[2][1][2][1][2][5][1]=numpy.array(tuple('parfait'),'|S1')


We verify that our change works.

::

 >>>  tree[2][1][2][1][2][5]
::

 ['fluid',array(['p','a','r','f','a','i','t'],dtype='|S1'),[],'DataArray_t']


The *update* function must be specified in a dictionary which contains the *path* where 
is located the node which interests us and this same node which contains the data which
are to change.This feature is in the sixth position in the list of the arguments.

::

 Update={'/Disk/.Solver#Compute/fluid':tree[2][1][2][1][2][5]}

 (tr,links)=CGNS.MAP.load("001Disk.hdf", CGNS.MAP.S2P_DEFAULT, 0, '', [], Update)


Copy a part of a tree
~~~~~~~~~~~~~~~~~~~~~

To copy only a part of a tree, you have to use the *load* function by mentioning the *path* which
defines the start node of the load. In our example, we load only the node whose label is 'fluid' because this
node has no children and the nodes '.SOLVER#Compute' and 'Disk' which are parents of the node 'fluid'.

::

 import CGNS.MAP

 path='/Disk/.Solver#Compute/fluid'

 (tree,links)=CGNS.MAP.load("001Disk.hdf",CGNS.MAP.S2P_DEFAULT,0,path,[],None)

::

 >>> print tree

 ['CGNSTree', None, [['Disk', array([3, 3], dtype=int32), [['.Solver#Compute', None, 
 [['fluid', array(['I', 'd', 'e', 'a', 'l'], dtype='|S1'), [], 'DataArray_t']], 
 'UserDefinedData_t']], 'CGNSBase_t']], 'CGNSTree_t']


Copy and merge links
~~~~~~~~~~~~~~~~~~~~

In order to extract the *links*, you have to specify the path where are situated the other files which are linked to our file in a list.
For example, we are looking for the link files which are in the directory 'liens'.


::

 import CGNS.MAP

 (tree, links)=CGNS.MAP.load("./liens/3element_airfoll_msh_cfd.hdf", CGNS.MAP.S2P_DEFAULT,0,'',['./liens/'],None)

 print links





